
const int buttonPin = 3;   // Push button input (active LOW)
const int pirPin = 2;      // PIR motion sensor output (HIGH when motion detected)
const int led1 = 5;        // LED1, controlled by the button
const int led2 = 6;        // LED2, controlled by the PIR sensor

volatile bool led1State = LOW;
volatile bool led2State = LOW;
volatile unsigned long lastButtonPress = 0; // for debounce


void handleButtonInterrupt() {
  unsigned long now = millis();

  // Debounce: ignore if <200 ms since last press
  if (now - lastButtonPress > 200) {
    if (digitalRead(buttonPin) == LOW) { // only act when actually pressed
      led1State = !led1State;
      digitalWrite(led1, led1State);
      Serial.println(led1State ? "Button pressed → LED1 ON" : "Button pressed → LED1 OFF");
    }
  }

  lastButtonPress = now;
}


void handlePirInterrupt() {
  // Read PIR state directly (HIGH = motion, LOW = no motion)
  led2State = digitalRead(pirPin);
  digitalWrite(led2, led2State);

  Serial.println(led2State ? "Motion detected → LED2 ON" : "Motion ended → LED2 OFF");
}

void setup() {
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP); // internal pull-up
  pinMode(pirPin, INPUT);

  Serial.begin(9600);
  delay(1000); // allow hardware to stabilize
  while (!Serial);

  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);

  // Attach interrupts
  attachInterrupt(digitalPinToInterrupt(buttonPin), handleButtonInterrupt, CHANGE);
  attachInterrupt(digitalPinToInterrupt(pirPin), handlePirInterrupt, CHANGE);
}


void loop() {
  // Nothing here — interrupts handle everything
}
